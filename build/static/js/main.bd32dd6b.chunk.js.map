{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","valid_websocket","App","_useState","useState","_useState2","Object","slicedToArray","web_socket_url","setWeb_socket_url","_useState3","_useState4","websocket_render","render_websocket","_useState5","_useState6","valid","set_valid","react_default","a","createElement","className","build_default","url","onOpen","toast","success","bind","this","onMessage","data","onClose","warning","style","marginLeft","marginTop","htmlFor","type","value","onChange","event","target","placeholder","onClick","test","error","react_toastify","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gLCOlCC,eAAkB,sEA4ETC,MA1Ef,WAAe,IAAAC,EAuB+BC,mBAC5C,IAxBaC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAuBNK,EAvBMH,EAAA,GAuBUI,EAvBVJ,EAAA,GAAAK,EA0BgCN,oBAC7C,GA3BaO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GA0BNE,EA1BMD,EAAA,GA0BYE,EA1BZF,EAAA,GAAAG,EA6BcV,oBAC3B,GA9BaW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GA6BNE,EA7BMD,EAAA,GA6BCE,EA7BDF,EAAA,GAmCb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbT,EACAM,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAWI,IAAKf,EACdgB,OA1BN,WACEP,GAAU,GACVQ,IAAMC,QAAQ,2BAwBKC,KAAKC,MACpBC,UA9BN,SAAmBC,GACjBL,YAAMK,IA6BmBH,KAAKC,MAC1BG,QAxBN,WACEN,IAAMO,QAAQ,yBACdf,GAAU,GACVJ,GAAiB,IAqBIc,KAAKC,QAGtBV,EAAAC,EAAAC,cAAA,YAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMY,MAAO,CAACC,WAAW,GAAGC,UAAU,KACnDjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UAAUe,QAAQ,gCAAnC,YACAlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,qBAAuBL,EAAQ,QAAU,cAA1D,kBAEFE,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,OAAOhB,UAAU,eAAeiB,MAAO9B,EAAgB+B,SAzBrD,SAAAC,GAAK,OAAI/B,EAAkB+B,EAAMC,OAAOH,QAyB8CI,YAAY,wBAGpHxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQiB,KAAK,SAAShB,UAAU,eAAesB,QA7D7D,WACK1C,EAAgB2C,KAAKpC,GACtBK,GAAiB,IAEjBI,GAAU,GACVQ,IAAMoB,MAAM,4BAwDF,gBAMV3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,QCjEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECTNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd32dd6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Websocket from 'react-websocket';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst valid_websocket = /^wss?:\\/\\/([0-9]{1,3}(?:\\.[0-9]{1,3}){3}|[a-zA-Z]+)(:[0-9]{1,5})$/i;\r\n\r\nfunction App() {\r\n  function connect(){\r\n    if(valid_websocket.test(web_socket_url)){\r\n      render_websocket(true);\r\n    }else{\r\n      set_valid(false);\r\n      toast.error(\"Address is not valid!\");\r\n\r\n    }\r\n  };\r\n\r\n  function onMessage(data) {\r\n    toast(data);\r\n  };\r\n  function onOpen(){\r\n    set_valid(true);\r\n    toast.success(\"Connected successfully\");\r\n  };\r\n  function onClose(){\r\n    toast.warning(\"Server not available!\");\r\n    set_valid(false);\r\n    render_websocket(false);\r\n  };\r\n  const [web_socket_url, setWeb_socket_url] = useState(\r\n  ''\r\n  );\r\n  const [websocket_render, render_websocket] = useState(\r\n  false\r\n  );\r\n  const [valid, set_valid] = useState(\r\n  false\r\n  );\r\n\r\n  const web_socket_url_change = event => setWeb_socket_url(event.target.value);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    {\r\n      websocket_render ?\r\n      <Websocket url={web_socket_url}\r\n        onOpen={onOpen.bind(this)}\r\n        onMessage={onMessage.bind(this)}\r\n        onClose={onClose.bind(this)}\r\n        />\r\n        :\r\n        <div></div>\r\n    }\r\n\r\n      <div className=\"row\" style={{marginLeft:20,marginTop:18}} >\r\n        <div className=\"col-md-12\">\r\n          <form>\r\n            <div className=\"form-row align-items-center\">\r\n              <div className=\"col-sm-7 my-1\">\r\n                <label className=\"sr-only\" htmlFor=\"inlineFormInputGroupUsername\">Username</label>\r\n                <div className=\"input-group\">\r\n                  <div className=\"input-group-prepend\">\r\n                    <div className={ 'input-group-text ' + (valid ? 'valid' : 'not-valid') }>WebSocket Uri</div>\r\n                  </div>\r\n                  <input type=\"text\" className=\"form-control\" value={web_socket_url} onChange={web_socket_url_change} placeholder=\"ws://0.0.0.0:8181\" />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-sm-1 my-1\">\r\n                <button type=\"button\" className=\"btn btn-dark\" onClick={connect}>Connect</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}